Field:
    type: object
    config:
        description: "An eZ Platform Content Field."
        fields:
            id:
                type: "Int"
                description: "Internal id of the field."
            fieldDefIdentifier:
                type: "String"
                description: "The field definition identifier."
            value:
                type: "FieldValue"
                description: "The value of the field."
            languageCode:
                type: "String"
                description: "The language code of the field."

FieldValue:
    type: interface
    config:
        fields:
            text:
                type: "String"
                description: "String representation of the value"
            html:
                type: "String"
                description: "HTML representation of the value"
                args:
                    template:
                        type: "String"
                        description: "Custom field template to use for field rendering"
                    attributes:
                        type: "String"
                        description: "hash of HTML attributes you want to add to the inner markup"
                    lang:
                        type: "String"
                        description: "Override the current language. Must be a valid locale with xxx-YY format"
        resolveType: "@=resolver('FieldValueType', [value])"

HTMLFieldValue:
    type: object
    config:
        fields:
            html:
                type: "String"
                description: "HTML representation of the value"
                resolve: "@=resolver('FieldValueToHtml', [value, args])"
                args:
                    template:
                        type: "String"
                        description: "Custom field template to use for field rendering"
                    attributes:
                        type: "String"
                        description: "hash of HTML attributes you want to add to the inner markup"
                    lang:
                        type: "String"
                        description: "Override the current language. Must be a valid locale with xxx-YY format"

GenericFieldValue:
    type: object
    config:
        fields:
            text:
                type: "String"
                description: "String representation of the value"
                resolve: "@=value"
        interfaces: [FieldValue]
    inherits: [HTMLFieldValue]

ImageFieldValue:
    type: object
    config:
        fields:
            text:
                type: "String"
                description: "String representation of the value"
                resolve: "@=value"
            id:
                type: "String"
                resolve: "@=value.id"
            alternativeText:
                type: "String"
                resolve: "@=value.alternativeText"
            fileName:
                type: "String"
                resolve: "@=value.fileName"
            fileSize:
                type: "Int"
                resolve: "@=value.fileSize"
            uri:
                type: "String"
                resolve: "@=value.uri"
            width:
                type: "Int"
                resolve: "@=value.width"
            height:
                type: "Int"
                resolve: "@=value.height"
            variations:
                type: "[ImageVariation]"
                args:
                    identifier:
                        type: "[ImageVariationIdentifier]!"
                        description: "One or more variation identifiers."
                resolve: "@=resolver('ImageVariation', [value.value, args])"
            variation:
                type: ImageVariation
                args:
                    identifier:
                        type: ImageVariationIdentifier!
                        description: "A variation identifier."
                resolve: "@=resolver('ImageVariation', [value.value, args])"
            html:
                type: "String"
                args:
                    parameters:
                        type: "ImageFieldValueHtmlParameters"
        interfaces: [FieldValue]
    inherits: [HTMLFieldValue]

ImageFieldValueHtmlParameters:
    type: "input-object"
    config:
        fields:
            alias: {type: "String"}
            width: {type: "String"}
            height: {type: "String"}
            class: {type: "String"}

ImageVariation:
    type: object
    config:
        fields:
            uri:
                type: "String"
            name:
                type: "String"
            mimeType:
                type: "String"
            fileName:
                type: "String"
            dirPath:
                type: "String"
            lastModified:
                type: "String"

AuthorFieldValue:
    type: object
    config:
        fields:
            id:
                type: "Int"
            name:
                type: "String"
            email:
                type: "String"

BinaryBaseFieldValue:
    type: object
    config:
        fields:
            id:
                type: String
            fileName:
                type: String
            fileSize:
                type: Int
            mimeType:
                type: String
            uri:
                type: String
            text:
                type: String

BinaryFileFieldValue:
    type: object
    config:
        interfaces: [FieldValue]
        fields:
            downloadCount:
                type: Int
    inherits: [BinaryBaseFieldValue, HTMLFieldValue]

CountryFieldValue:
    type: object
    config:
        interfaces: [FieldValue]
        fields:
            text:
                type: "String"
                description: "String representation of the value"
                resolve: "@=value"
    inherits: [HTMLFieldValue]

DateFieldValue:
    type: object
    config:
        interfaces: [FieldValue]
        fields:
            text:
                type: "String"
                description: "Unix timestamp"
                resolve: "@=value.value ? value.value.getTimestamp() : null"
            formatted:
                type: "String"
                description: "Formatted date"
                # @todo: refactor with a datetime resolver
                resolve: "@=resolver('DateTimeFormat', [args['format'], value.value])"
                args:
                    format:
                        type: String
                        description: "A format string compatible with PHP's date() function"
    inherits: [HTMLFieldValue]

DateAndTimeFieldValue:
    type: object
    inherits: ["DateFieldValue"]
    config:
        interfaces: [FieldValue]
    inherits: [HTMLFieldValue]

EmailAddressFieldValue:
    type: object
    config:
        interfaces: [FieldValue]
        fields:
            text:
                type: "String"
                description: "String representation of the value"
                resolve: "@=value.email"
    inherits: [HTMLFieldValue]

KeywordFieldValue:
    type: object
    config:
        interfaces: [FieldValue]
        fields:
            text:
                type: "String"
                description: "String representation of the value"
                # @todo will fail, array to string conversion
                resolve: "@=value"
    inherits: [HTMLFieldValue]

MapLocationFieldValue:
    type: object
    config:
        interfaces: [FieldValue]
        fields:
            text:
                type: "String"
                description: "String representation of the value"
                resolve: "@=value"
            latitude:
                type: "String"
                resolve: "@=value.latitude"
            longitude:
                type: "String"
                resolve: "@=value.longitude"
            address:
                type: "String"
                resolve: "@=value.address"
            html:
                type: "String"
                args:
                    params:
                        type: "MapLocationHtmlParameters"

    inherits: [HTMLFieldValue]

MapLocationHtmlParameters:
    type: "input-object"
    config:
        fields:
            draggable: { type: "Boolean" }
            height: { type: "String", description: "The height of the rendered map with its unit (for example \"200px\" or \"20em\")." }
            width: { type: "String", description: "The width of the rendered map with its unit (for example \"500px\" or \"50em\")." }
            mapType: { type: "String", description: "One of the GMap types of map (https://developers.google.com/maps/documentation/javascript/maptypes#BasicMapTypes)" }
            scrollWheel: { type: "Boolean", description: "Allows you to disable scroll wheel starting to zoom when mouse comes over the map as user scrolls down a page." }
            showInfo: { type: "Boolean", description: "Whether to show a latitude, longitude and the address outside of the map" }
            showMap: { type: "Boolean", description: "Whether to show a Map" }
            zoom: { type: "Int", description: "The initial zoom level. Default: 13" }

MediaFieldValue:
    type: object
    config:
        interfaces: [FieldValue]
        fields:
            text:
                type: String
                description: "String representation of the value"
                resolve: "@=value.uri"
            hasController:
                type: Boolean
                description: "If the media has a controller when being displayed."
                resolve: "@=value.hasController"
            autoplay:
                type: Boolean
                description: "If the media should be automatically played."
                resolve: "@=value.autoplay"
            loop:
                type: Boolean
                description: "If the media should be played in a loop."
                resolve: "@=value.loop"
            height:
                type: Int
                description: "Height of the media."
                resolve: "@=value.height"
            width:
                type: Int
                description: "Width of the media."
                resolve: "@=value.widht"
    inherits: [BinaryBaseFieldValue, HTMLFieldValue]

PriceFieldValue:
    type: object
    config:
        interfaces: [FieldValue]
        fields:
            text:
                type: "String"
                description: "String representation of the value"
                resolve: "@=value"
    inherits: [HTMLFieldValue]

RatingFieldValue:
    type: object
    config:
        interfaces: [FieldValue]
        fields:
            text:
                type: "String"
                description: "String representation of the value"
                resolve: "@=value"
    inherits: [HTMLFieldValue]

RelationFieldValue:
    type: object
    config:
        interfaces: [FieldValue]
        fields:
            text:
                type: "String"
                description: "String representation of the value"
                resolve: "@=value"
            destinationContentItem:
                type: "Content"
                description: "The related Content item"
                resolve: "@=resolver('ContentById', [value.destinationContentId])"
    inherits: [HTMLFieldValue]

RelationListFieldValue:
    type: object
    config:
        interfaces: [FieldValue]
        fields:
            text:
                type: "String"
                description: "String representation of the value"
                resolve: "@=value"
            destinationContentItems:
                type: "[Content]"
                description: "The related content items"
                resolve: "@=resolver('ContentByIdList', [value.destinationContentIds])"
    inherits: [HTMLFieldValue]

RichTextFieldValue:
    type: object
    config:
        interfaces: [FieldValue]
        fields:
            text:
                type: "String"
                description: "String representation of the value"
                resolve: "@=value"
            xml:
                type: "String"
                description: "The raw docbook xml"
                resolve: "@=value"
            plaintext:
                type: "String"
                description: "Plain text representation of the value, without tags."
                resolve: "@=resolver('RichTextXmlToPlainText', [value.xml.plain_text])"
            html5:
                type: "String"
                description: "HTML5 representation."
                resolve: "@=resolver('RichTextXmlToHtml5', [value.xml])"
            html5_edit:
                type: "String"
                description: "Editable HTML5 representation."
                resolve: "@=resolver('RichTextXmlToHtml5Edit', [value.xml])"
    inherits: [HTMLFieldValue]

SelectionFieldValue:
    type: object
    config:
        interfaces: [FieldValue]
        fields:
            text:
                type: "String"
                description: "String representation of the value"
                resolve: "@=value"
    inherits: [HTMLFieldValue]
